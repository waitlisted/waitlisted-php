<?php
/**
 * SiteResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Waitlisted
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Waitlisted API
 *
 * Waitlisted API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Waitlisted\Models;

use \ArrayAccess;

/**
 * SiteResponse Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Waitlisted
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SiteResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SiteResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'brand_color' => 'string',
        'button_text_color' => 'string',
        'custom_styles' => 'string',
        'ask_name' => 'bool',
        'signup_title' => 'string',
        'signup_copy' => 'string',
        'position_title' => 'string',
        'social_copy' => 'string',
        'social_message' => 'string',
        'domain' => 'string',
        'share_social_copy' => 'string',
        'referral_copy' => 'string',
        'check_position_copy' => 'string',
        'join_button_copy' => 'string',
        'check_reservation_copy' => 'string',
        'email_field_label' => 'string',
        'name_field_label' => 'string',
        'thank_you_share_template' => 'string',
        'waitlist_threshold' => 'int',
        'use_custom_thank_you' => 'bool',
        'hide_waitlist' => 'bool',
        'unmet_shared_template' => 'string',
        'threshold_met' => 'bool',
        'website_url' => 'string',
        'tracking_code' => 'string',
        'custom_css' => 'string',
        'hide_branding' => 'bool',
        'total_count' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'brand_color' => 'brand_color',
        'button_text_color' => 'button_text_color',
        'custom_styles' => 'custom_styles',
        'ask_name' => 'ask_name',
        'signup_title' => 'signup_title',
        'signup_copy' => 'signup_copy',
        'position_title' => 'position_title',
        'social_copy' => 'social_copy',
        'social_message' => 'social_message',
        'domain' => 'domain',
        'share_social_copy' => 'share_social_copy',
        'referral_copy' => 'referral_copy',
        'check_position_copy' => 'check_position_copy',
        'join_button_copy' => 'join_button_copy',
        'check_reservation_copy' => 'check_reservation_copy',
        'email_field_label' => 'email_field_label',
        'name_field_label' => 'name_field_label',
        'thank_you_share_template' => 'thank_you_share_template',
        'waitlist_threshold' => 'waitlist_threshold',
        'use_custom_thank_you' => 'use_custom_thank_you',
        'hide_waitlist' => 'hide_waitlist',
        'unmet_shared_template' => 'unmet_shared_template',
        'threshold_met' => 'threshold_met',
        'website_url' => 'website_url',
        'tracking_code' => 'tracking_code',
        'custom_css' => 'custom_css',
        'hide_branding' => 'hide_branding',
        'total_count' => 'total_count'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'brand_color' => 'setBrandColor',
        'button_text_color' => 'setButtonTextColor',
        'custom_styles' => 'setCustomStyles',
        'ask_name' => 'setAskName',
        'signup_title' => 'setSignupTitle',
        'signup_copy' => 'setSignupCopy',
        'position_title' => 'setPositionTitle',
        'social_copy' => 'setSocialCopy',
        'social_message' => 'setSocialMessage',
        'domain' => 'setDomain',
        'share_social_copy' => 'setShareSocialCopy',
        'referral_copy' => 'setReferralCopy',
        'check_position_copy' => 'setCheckPositionCopy',
        'join_button_copy' => 'setJoinButtonCopy',
        'check_reservation_copy' => 'setCheckReservationCopy',
        'email_field_label' => 'setEmailFieldLabel',
        'name_field_label' => 'setNameFieldLabel',
        'thank_you_share_template' => 'setThankYouShareTemplate',
        'waitlist_threshold' => 'setWaitlistThreshold',
        'use_custom_thank_you' => 'setUseCustomThankYou',
        'hide_waitlist' => 'setHideWaitlist',
        'unmet_shared_template' => 'setUnmetSharedTemplate',
        'threshold_met' => 'setThresholdMet',
        'website_url' => 'setWebsiteUrl',
        'tracking_code' => 'setTrackingCode',
        'custom_css' => 'setCustomCss',
        'hide_branding' => 'setHideBranding',
        'total_count' => 'setTotalCount'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'brand_color' => 'getBrandColor',
        'button_text_color' => 'getButtonTextColor',
        'custom_styles' => 'getCustomStyles',
        'ask_name' => 'getAskName',
        'signup_title' => 'getSignupTitle',
        'signup_copy' => 'getSignupCopy',
        'position_title' => 'getPositionTitle',
        'social_copy' => 'getSocialCopy',
        'social_message' => 'getSocialMessage',
        'domain' => 'getDomain',
        'share_social_copy' => 'getShareSocialCopy',
        'referral_copy' => 'getReferralCopy',
        'check_position_copy' => 'getCheckPositionCopy',
        'join_button_copy' => 'getJoinButtonCopy',
        'check_reservation_copy' => 'getCheckReservationCopy',
        'email_field_label' => 'getEmailFieldLabel',
        'name_field_label' => 'getNameFieldLabel',
        'thank_you_share_template' => 'getThankYouShareTemplate',
        'waitlist_threshold' => 'getWaitlistThreshold',
        'use_custom_thank_you' => 'getUseCustomThankYou',
        'hide_waitlist' => 'getHideWaitlist',
        'unmet_shared_template' => 'getUnmetSharedTemplate',
        'threshold_met' => 'getThresholdMet',
        'website_url' => 'getWebsiteUrl',
        'tracking_code' => 'getTrackingCode',
        'custom_css' => 'getCustomCss',
        'hide_branding' => 'getHideBranding',
        'total_count' => 'getTotalCount'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['brand_color'] = isset($data['brand_color']) ? $data['brand_color'] : null;
        $this->container['button_text_color'] = isset($data['button_text_color']) ? $data['button_text_color'] : null;
        $this->container['custom_styles'] = isset($data['custom_styles']) ? $data['custom_styles'] : null;
        $this->container['ask_name'] = isset($data['ask_name']) ? $data['ask_name'] : null;
        $this->container['signup_title'] = isset($data['signup_title']) ? $data['signup_title'] : null;
        $this->container['signup_copy'] = isset($data['signup_copy']) ? $data['signup_copy'] : null;
        $this->container['position_title'] = isset($data['position_title']) ? $data['position_title'] : null;
        $this->container['social_copy'] = isset($data['social_copy']) ? $data['social_copy'] : null;
        $this->container['social_message'] = isset($data['social_message']) ? $data['social_message'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['share_social_copy'] = isset($data['share_social_copy']) ? $data['share_social_copy'] : null;
        $this->container['referral_copy'] = isset($data['referral_copy']) ? $data['referral_copy'] : null;
        $this->container['check_position_copy'] = isset($data['check_position_copy']) ? $data['check_position_copy'] : null;
        $this->container['join_button_copy'] = isset($data['join_button_copy']) ? $data['join_button_copy'] : null;
        $this->container['check_reservation_copy'] = isset($data['check_reservation_copy']) ? $data['check_reservation_copy'] : null;
        $this->container['email_field_label'] = isset($data['email_field_label']) ? $data['email_field_label'] : null;
        $this->container['name_field_label'] = isset($data['name_field_label']) ? $data['name_field_label'] : null;
        $this->container['thank_you_share_template'] = isset($data['thank_you_share_template']) ? $data['thank_you_share_template'] : null;
        $this->container['waitlist_threshold'] = isset($data['waitlist_threshold']) ? $data['waitlist_threshold'] : null;
        $this->container['use_custom_thank_you'] = isset($data['use_custom_thank_you']) ? $data['use_custom_thank_you'] : null;
        $this->container['hide_waitlist'] = isset($data['hide_waitlist']) ? $data['hide_waitlist'] : null;
        $this->container['unmet_shared_template'] = isset($data['unmet_shared_template']) ? $data['unmet_shared_template'] : null;
        $this->container['threshold_met'] = isset($data['threshold_met']) ? $data['threshold_met'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['tracking_code'] = isset($data['tracking_code']) ? $data['tracking_code'] : null;
        $this->container['custom_css'] = isset($data['custom_css']) ? $data['custom_css'] : null;
        $this->container['hide_branding'] = isset($data['hide_branding']) ? $data['hide_branding'] : null;
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets brand_color
     * @return string
     */
    public function getBrandColor()
    {
        return $this->container['brand_color'];
    }

    /**
     * Sets brand_color
     * @param string $brand_color
     * @return $this
     */
    public function setBrandColor($brand_color)
    {
        $this->container['brand_color'] = $brand_color;

        return $this;
    }

    /**
     * Gets button_text_color
     * @return string
     */
    public function getButtonTextColor()
    {
        return $this->container['button_text_color'];
    }

    /**
     * Sets button_text_color
     * @param string $button_text_color
     * @return $this
     */
    public function setButtonTextColor($button_text_color)
    {
        $this->container['button_text_color'] = $button_text_color;

        return $this;
    }

    /**
     * Gets custom_styles
     * @return string
     */
    public function getCustomStyles()
    {
        return $this->container['custom_styles'];
    }

    /**
     * Sets custom_styles
     * @param string $custom_styles
     * @return $this
     */
    public function setCustomStyles($custom_styles)
    {
        $this->container['custom_styles'] = $custom_styles;

        return $this;
    }

    /**
     * Gets ask_name
     * @return bool
     */
    public function getAskName()
    {
        return $this->container['ask_name'];
    }

    /**
     * Sets ask_name
     * @param bool $ask_name
     * @return $this
     */
    public function setAskName($ask_name)
    {
        $this->container['ask_name'] = $ask_name;

        return $this;
    }

    /**
     * Gets signup_title
     * @return string
     */
    public function getSignupTitle()
    {
        return $this->container['signup_title'];
    }

    /**
     * Sets signup_title
     * @param string $signup_title
     * @return $this
     */
    public function setSignupTitle($signup_title)
    {
        $this->container['signup_title'] = $signup_title;

        return $this;
    }

    /**
     * Gets signup_copy
     * @return string
     */
    public function getSignupCopy()
    {
        return $this->container['signup_copy'];
    }

    /**
     * Sets signup_copy
     * @param string $signup_copy
     * @return $this
     */
    public function setSignupCopy($signup_copy)
    {
        $this->container['signup_copy'] = $signup_copy;

        return $this;
    }

    /**
     * Gets position_title
     * @return string
     */
    public function getPositionTitle()
    {
        return $this->container['position_title'];
    }

    /**
     * Sets position_title
     * @param string $position_title
     * @return $this
     */
    public function setPositionTitle($position_title)
    {
        $this->container['position_title'] = $position_title;

        return $this;
    }

    /**
     * Gets social_copy
     * @return string
     */
    public function getSocialCopy()
    {
        return $this->container['social_copy'];
    }

    /**
     * Sets social_copy
     * @param string $social_copy
     * @return $this
     */
    public function setSocialCopy($social_copy)
    {
        $this->container['social_copy'] = $social_copy;

        return $this;
    }

    /**
     * Gets social_message
     * @return string
     */
    public function getSocialMessage()
    {
        return $this->container['social_message'];
    }

    /**
     * Sets social_message
     * @param string $social_message
     * @return $this
     */
    public function setSocialMessage($social_message)
    {
        $this->container['social_message'] = $social_message;

        return $this;
    }

    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     * @param string $domain
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets share_social_copy
     * @return string
     */
    public function getShareSocialCopy()
    {
        return $this->container['share_social_copy'];
    }

    /**
     * Sets share_social_copy
     * @param string $share_social_copy
     * @return $this
     */
    public function setShareSocialCopy($share_social_copy)
    {
        $this->container['share_social_copy'] = $share_social_copy;

        return $this;
    }

    /**
     * Gets referral_copy
     * @return string
     */
    public function getReferralCopy()
    {
        return $this->container['referral_copy'];
    }

    /**
     * Sets referral_copy
     * @param string $referral_copy
     * @return $this
     */
    public function setReferralCopy($referral_copy)
    {
        $this->container['referral_copy'] = $referral_copy;

        return $this;
    }

    /**
     * Gets check_position_copy
     * @return string
     */
    public function getCheckPositionCopy()
    {
        return $this->container['check_position_copy'];
    }

    /**
     * Sets check_position_copy
     * @param string $check_position_copy
     * @return $this
     */
    public function setCheckPositionCopy($check_position_copy)
    {
        $this->container['check_position_copy'] = $check_position_copy;

        return $this;
    }

    /**
     * Gets join_button_copy
     * @return string
     */
    public function getJoinButtonCopy()
    {
        return $this->container['join_button_copy'];
    }

    /**
     * Sets join_button_copy
     * @param string $join_button_copy
     * @return $this
     */
    public function setJoinButtonCopy($join_button_copy)
    {
        $this->container['join_button_copy'] = $join_button_copy;

        return $this;
    }

    /**
     * Gets check_reservation_copy
     * @return string
     */
    public function getCheckReservationCopy()
    {
        return $this->container['check_reservation_copy'];
    }

    /**
     * Sets check_reservation_copy
     * @param string $check_reservation_copy
     * @return $this
     */
    public function setCheckReservationCopy($check_reservation_copy)
    {
        $this->container['check_reservation_copy'] = $check_reservation_copy;

        return $this;
    }

    /**
     * Gets email_field_label
     * @return string
     */
    public function getEmailFieldLabel()
    {
        return $this->container['email_field_label'];
    }

    /**
     * Sets email_field_label
     * @param string $email_field_label
     * @return $this
     */
    public function setEmailFieldLabel($email_field_label)
    {
        $this->container['email_field_label'] = $email_field_label;

        return $this;
    }

    /**
     * Gets name_field_label
     * @return string
     */
    public function getNameFieldLabel()
    {
        return $this->container['name_field_label'];
    }

    /**
     * Sets name_field_label
     * @param string $name_field_label
     * @return $this
     */
    public function setNameFieldLabel($name_field_label)
    {
        $this->container['name_field_label'] = $name_field_label;

        return $this;
    }

    /**
     * Gets thank_you_share_template
     * @return string
     */
    public function getThankYouShareTemplate()
    {
        return $this->container['thank_you_share_template'];
    }

    /**
     * Sets thank_you_share_template
     * @param string $thank_you_share_template
     * @return $this
     */
    public function setThankYouShareTemplate($thank_you_share_template)
    {
        $this->container['thank_you_share_template'] = $thank_you_share_template;

        return $this;
    }

    /**
     * Gets waitlist_threshold
     * @return int
     */
    public function getWaitlistThreshold()
    {
        return $this->container['waitlist_threshold'];
    }

    /**
     * Sets waitlist_threshold
     * @param int $waitlist_threshold
     * @return $this
     */
    public function setWaitlistThreshold($waitlist_threshold)
    {
        $this->container['waitlist_threshold'] = $waitlist_threshold;

        return $this;
    }

    /**
     * Gets use_custom_thank_you
     * @return bool
     */
    public function getUseCustomThankYou()
    {
        return $this->container['use_custom_thank_you'];
    }

    /**
     * Sets use_custom_thank_you
     * @param bool $use_custom_thank_you
     * @return $this
     */
    public function setUseCustomThankYou($use_custom_thank_you)
    {
        $this->container['use_custom_thank_you'] = $use_custom_thank_you;

        return $this;
    }

    /**
     * Gets hide_waitlist
     * @return bool
     */
    public function getHideWaitlist()
    {
        return $this->container['hide_waitlist'];
    }

    /**
     * Sets hide_waitlist
     * @param bool $hide_waitlist
     * @return $this
     */
    public function setHideWaitlist($hide_waitlist)
    {
        $this->container['hide_waitlist'] = $hide_waitlist;

        return $this;
    }

    /**
     * Gets unmet_shared_template
     * @return string
     */
    public function getUnmetSharedTemplate()
    {
        return $this->container['unmet_shared_template'];
    }

    /**
     * Sets unmet_shared_template
     * @param string $unmet_shared_template
     * @return $this
     */
    public function setUnmetSharedTemplate($unmet_shared_template)
    {
        $this->container['unmet_shared_template'] = $unmet_shared_template;

        return $this;
    }

    /**
     * Gets threshold_met
     * @return bool
     */
    public function getThresholdMet()
    {
        return $this->container['threshold_met'];
    }

    /**
     * Sets threshold_met
     * @param bool $threshold_met
     * @return $this
     */
    public function setThresholdMet($threshold_met)
    {
        $this->container['threshold_met'] = $threshold_met;

        return $this;
    }

    /**
     * Gets website_url
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     * @param string $website_url
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets tracking_code
     * @return string
     */
    public function getTrackingCode()
    {
        return $this->container['tracking_code'];
    }

    /**
     * Sets tracking_code
     * @param string $tracking_code
     * @return $this
     */
    public function setTrackingCode($tracking_code)
    {
        $this->container['tracking_code'] = $tracking_code;

        return $this;
    }

    /**
     * Gets custom_css
     * @return string
     */
    public function getCustomCss()
    {
        return $this->container['custom_css'];
    }

    /**
     * Sets custom_css
     * @param string $custom_css
     * @return $this
     */
    public function setCustomCss($custom_css)
    {
        $this->container['custom_css'] = $custom_css;

        return $this;
    }

    /**
     * Gets hide_branding
     * @return bool
     */
    public function getHideBranding()
    {
        return $this->container['hide_branding'];
    }

    /**
     * Sets hide_branding
     * @param bool $hide_branding
     * @return $this
     */
    public function setHideBranding($hide_branding)
    {
        $this->container['hide_branding'] = $hide_branding;

        return $this;
    }

    /**
     * Gets total_count
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     * @param int $total_count
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Waitlisted\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Waitlisted\ObjectSerializer::sanitizeForSerialization($this));
    }
}


